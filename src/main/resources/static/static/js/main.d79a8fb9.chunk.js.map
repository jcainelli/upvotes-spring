{"version":3,"sources":["componentes/Cabecalho.js","componentes/Inicio.js","componentes/Rodape.js","componentes/Contatos.js","componentes/Cadastro.js","App.js","serviceWorker.js","index.js"],"names":["Cabecalho","props","className","type","data-toggle","data-target","to","id","Inicio","state","posts","this","list","fetch","method","headers","then","res","json","setState","console","log","map","item","key","title","description","value","onClick","like","isTSEnumMember","aria-hidden","upVotes","React","Component","Rodape","Contatos","name","placeholder","required","rows","Cadastro","gravaPost","bind","showSuccess","showError","e","postObj","body","JSON","stringify","showWarning","preventDefault","role","onSubmit","htmlFor","ref","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d79a8fb9.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Cabecalho = props => {\n    return (\n        <div>\n            <div className='jumbotron text-center'>\n                <h1>UpVote</h1>\n                <p>Vote no Post de seu interesse</p>\n            </div>\n\n            <nav className='navbar navbar-default navbar-fixed-top'>\n                <div className='container'>\n                    <div className='navbar-header'>\n                        <button type='button' className='navbar-toggle' data-toggle='collapse' data-target='#myNavbar'>\n                            <span className='icon-bar'></span>\n                            <span className='icon-bar'></span>\n                            <span className='icon-bar'></span>\n                        </button>\n                        <Link className='navbar-brand' to='/'>UpVote</Link>\n                    </div>\n                    <div className='collapse navbar-collapse' id='myNavbar'>\n                        <ul className='nav navbar-nav navbar-right'>\n                            <li><Link to='/'>INICIO</Link></li>\n                            <li><Link to='/cadastro'>CADASTRAR</Link></li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>            \n        </div>\n    )\n}\n\nexport default Cabecalho","import React from 'react';\nimport { isTSEnumMember } from '@babel/types';\n\nclass Inicio extends React.Component {\n    state = {\n        posts: []\n    };\n\n    componentDidMount() {\n        this.list();\n\n    }\n\n\n    list() {\n        fetch('http://localhost:8080/rest/upvote/', {\n            method: \"GET\",\n            headers: {\n                \"access-control-allow-origin\": \"*\",\n                \"Content-type\": \"application/json; charset=UTF-8\"\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                this.setState({\n                    posts: res\n                });\n            });\n    }\n\n    like(id) {\n        fetch('http://localhost:8080/rest/upvote/like/' + id, {\n            method: \"PUT\",\n            headers: {\n                \"access-control-allow-origin\": \"*\"\n            }\n        })\n            .then(res => res.json())\n            .then(res => {\n                console.log(res);\n                if (res){\n                    this.list();\n                }\n            });\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                <h1>Lista de Posts</h1>\n\n                <ul className=\"list-group\">\n                    {this.state.posts.map(item => (\n                        <li className=\"list-group-item\" key={item.id}>\n                            <div className=\"card\">\n                                <div className=\"card-body\">\n                                    <p><b>Titulo:</b> {item.title}</p>\n                                    <p><b>Descrição:</b> {item.description}</p>\n                                    <p>\n                                        <button type=\"button\" className=\"btn btn-primary\" value={item.id} onClick={() => this.like(item.id)}>{isTSEnumMember.id}>\n                                            <span className=\"glyphicon glyphicon glyphicon-thumbs-up\" aria-hidden=\"true\" /> Votar\n                                        </button>\n                                        &nbsp;Votos: {item.upVotes}\n                                    </p>\n                                </div>\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n\n\n            </div>\n        );\n    }\n}\n\nexport default Inicio;","import React from 'react'\n\nconst Rodape = props => {\n    return (\n        <footer className='container-fluid text-center footer-custom'>\n            <p>© 2009 Todos os direitos reservados</p>\n        </footer>\n    )\n}\n\nexport default Rodape","import React from 'react'\n\nconst Contatos = props => {\n    return (\n        <div id='contact' className='container-fluid bg-grey'>\n            <h2 className='text-center'>CONTACT</h2>\n            <div className='row'>\n                <div className='col-sm-5'>\n                    <p>Contact us and we'll get back to you within 24 hours.</p>\n                    <p><span className='glyphicon glyphicon-map-marker'></span> Chicago, US</p>\n                    <p><span className='glyphicon glyphicon-phone'></span> +00 1515151515</p>\n                    <p><span className='glyphicon glyphicon-envelope'></span> myemail@something.com</p>\n                </div>\n                <div className='col-sm-7 '>\n                    <div className='row'>\n                        <div className='col-sm-6 form-group'>\n                            <input className='form-control' id='name' name='name' placeholder='Name' type='text' required />\n                        </div>\n                        <div className='col-sm-6 form-group'>\n                            <input className='form-control' id='email' name='email' placeholder='Email' type='email' required />\n                        </div>\n                    </div>\n                    <textarea className='form-control' id='comments' name='comments' placeholder='Comment' rows='5'></textarea><br />\n                    <div className='row'>\n                        <div className='col-sm-12 form-group'>\n                            <button className='btn btn-default pull-right' type='submit'>Send</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Contatos","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nclass Cadastro extends Component {\n\n    constructor(props) {\n        super(props)\n        this.gravaPost = this.gravaPost.bind(this)\n        this.state = { showSuccess: false, showError: false };\n    }\n\n    gravaPost(e) {\n        console.log(\"gravaPost - 1\");\n        this.state.showError = false;\n        this.state.showSuccess = false;\n\n\n        const postObj = {\n            title: this.title.value,\n            description: this.description.value,\n            upVotes: 0\n\n        }\n\n        if (postObj.title == \"\") {\n            this.state.showError = true;\n        } else if (postObj.description == \"\") {\n            this.state.showError = true;\n        }\n\n        if (this.state.showError) {\n            this.setState(state => ({\n                showError: true\n            }));\n        } else {\n            console.log(\"Erro: \" + this.state.showError);\n\n            fetch('http://localhost:8080/rest/upvote/', {\n                method: \"POST\",\n                headers: {\n                    \"access-control-allow-origin\": \"*\",\n                    \"Content-type\": \"application/json; charset=UTF-8\"\n                },\n                body: JSON.stringify(postObj)\n            })\n                .then(res => res.json())\n                .then(res => {\n                    console.log(res);\n                    this.setState(state => ({\n                        showSuccess: !state.showWarning\n                    }));\n                });\n\n            console.log(postObj);\n            \n        }\n\n        e.preventDefault();\n    }\n\n\n    render() {\n\n        return (\n            <div className='container'>\n\n                {this.state.showSuccess ?\n                    (\n                        <div>\n                            <div className=\"alert alert-success\" role=\"alert\">\n                                Postado com sucesso\n                            </div>\n                            <Link to='/'>\n                                <button className=\"btn btn-primary\">INICIO</button>\n                            </Link>\n                        </div>\n                    ) :\n                    (\n                        <div>\n                            <h1>Cadastrar novo Post</h1>\n                            {this.state.showError ?\n                                <div className=\"alert alert-danger\" role=\"alert\">Todos os campos são obrigatórios!</div>\n                                : null}\n\n                            <form onSubmit={this.gravaPost}>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"title\">Título</label>\n                                    <input type=\"text\" className=\"form-control\" id=\"title\" placeholder=\"Titulo\" ref={(ref) => this.title = ref} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"descricao\">Descrição</label>\n                                    <textarea className=\"form-control\" id=\"descricao\" rows=\"3\" ref={(ref) => this.description = ref} />\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-primary\">Salvar</button>\n                            </form>\n                        </div>\n                    )\n                }\n\n            </div>\n        )\n    }\n\n}\n\nexport default Cadastro","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom' \n\nimport Cabecalho from './componentes/Cabecalho'\nimport Inicio from './componentes/Inicio'\nimport Rodape from './componentes/Rodape'\nimport Contatos from './componentes/Contatos'\nimport Cadastro from './componentes/Cadastro'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Cabecalho />\n        \n        <Route path='/' exact component={Inicio} /> \n        <Route path='/contato' component={Contatos} />\n        <Route path='/cadastro' component={Cadastro}/>''\n        \n        <Rodape />\n      </div>\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}